// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RealEstate.Models;

#nullable disable

namespace RealEstate.Migrations
{
    [DbContext(typeof(RealEstateProjectContext))]
    partial class RealEstateProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("latin1_swedish_ci")
                .HasAnnotation("ProductVersion", "6.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "latin1");

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("aspnetuserroles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("longtext");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleId")
                        .HasColumnType("varchar(255)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("IX_AspNetUserRoles_RoleId1");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetrole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex1");

                    b.ToTable("aspnetroles", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetroleclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId")
                        .HasDatabaseName("IX_AspNetRoleClaims_RoleId1");

                    b.ToTable("aspnetroleclaims", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetuser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int(11)");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("longtext");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasMaxLength(6)
                        .HasColumnType("datetime(6)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("longtext");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("longtext");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("longtext");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("varchar(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex")
                        .HasDatabaseName("EmailIndex1");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex1");

                    b.ToTable("aspnetusers", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetuserclaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)");

                    b.Property<string>("ClaimType")
                        .HasColumnType("longtext");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId")
                        .HasDatabaseName("IX_AspNetUserClaims_UserId1");

                    b.ToTable("aspnetuserclaims", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetuserlogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("longtext");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.HasKey("LoginProvider", "ProviderKey")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId")
                        .HasDatabaseName("IX_AspNetUserLogins_UserId1");

                    b.ToTable("aspnetuserlogins", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetusertoken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Value")
                        .HasColumnType("longtext");

                    b.HasKey("UserId", "LoginProvider", "Name")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.ToTable("aspnetusertokens", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Buycontract", b =>
                {
                    b.Property<int>("IdBuyContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_BuyContract");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("_Date");

                    b.Property<int>("IdBuyer")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Buyer");

                    b.Property<int>("IdEst")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Est");

                    b.Property<int>("SalePrice")
                        .HasColumnType("int(11)");

                    b.HasKey("IdBuyContract")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdBuyer" }, "id_Buyer");

                    b.HasIndex(new[] { "IdEst" }, "id_Est")
                        .IsUnique();

                    b.ToTable("buycontract", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Buyer", b =>
                {
                    b.Property<int>("IdBuyer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Buyer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("_Address");

                    b.Property<int?>("Age")
                        .HasColumnType("int(11)");

                    b.Property<long>("CellPhoneNumber")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<long>("Dni")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("DNI");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstSurName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("IdEstate")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Estate");

                    b.Property<string>("SecondName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SecondSurName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("IdBuyer")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Dni" }, "DNI");

                    b.HasIndex(new[] { "IdEstate" }, "Estate")
                        .IsUnique();

                    b.ToTable("buyer", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Efmigrationshistory", b =>
                {
                    b.Property<string>("MigrationId")
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<string>("ProductVersion")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.HasKey("MigrationId")
                        .HasName("PRIMARY");

                    b.ToTable("__efmigrationshistory", (string)null);

                    MySqlEntityTypeBuilderExtensions.HasCharSet(b, "utf8mb4");
                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_general_ci");
                });

            modelBuilder.Entity("RealEstate.Models.Estate", b =>
                {
                    b.Property<int>("IdEstate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Estate");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("_Address");

                    b.Property<string>("Alias")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("IdUser")
                        .HasColumnType("varchar(255)");

                    b.Property<int>("KmsGround")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Rented")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("Rooms")
                        .HasColumnType("int(11)");

                    b.Property<bool?>("Sold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.HasKey("IdEstate")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Alias" }, "Alias");

                    b.HasIndex(new[] { "IdUser" }, "Id_User_idx");

                    b.ToTable("estate", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Guarantor", b =>
                {
                    b.Property<int>("IdGuarantor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Guarantor");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("_Address");

                    b.Property<int?>("Age")
                        .HasColumnType("int(11)");

                    b.Property<long>("CellPhoneNumber")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<long>("Dni")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("DNI");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstSurName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("IdRenter")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Renter");

                    b.Property<string>("SecondName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SecondSurName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("IdGuarantor")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Dni" }, "DNI")
                        .HasDatabaseName("DNI1");

                    b.HasIndex(new[] { "IdRenter" }, "Renter");

                    b.ToTable("guarantor", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Mortgage", b =>
                {
                    b.Property<int>("IdMortgage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Mortgage");

                    b.Property<int?>("FeeValue")
                        .HasColumnType("int(11)");

                    b.Property<int?>("FeesNumber")
                        .HasColumnType("int(11)");

                    b.Property<int>("IdEstate")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Estate");

                    b.Property<string>("IdUser")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("Id_User");

                    b.Property<int?>("TotalValue")
                        .HasColumnType("int(11)");

                    b.HasKey("IdMortgage")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEstate" }, "Estate")
                        .IsUnique()
                        .HasDatabaseName("Estate1");

                    b.HasIndex(new[] { "IdUser" }, "iduser_idx");

                    b.ToTable("mortgage", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Payment", b =>
                {
                    b.Property<int>("IdPayments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Payments");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("_Date");

                    b.Property<int>("IdMortgage")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Mortgage");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("_Value");

                    b.HasKey("IdPayments")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdMortgage" }, "Id_Mortage");

                    b.ToTable("payments", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Renter", b =>
                {
                    b.Property<int>("IdRenter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Renter");

                    b.Property<bool?>("Active")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("_Address");

                    b.Property<int?>("Age")
                        .HasColumnType("int(11)");

                    b.Property<long>("CellPhoneNumber")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<long>("Dni")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("DNI");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstSurName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("IdEstate")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Estate");

                    b.Property<string>("SecondName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SecondSurName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("IdRenter")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Dni" }, "DNI")
                        .HasDatabaseName("DNI2");

                    b.HasIndex(new[] { "IdEstate" }, "Id_Est");

                    b.ToTable("renter", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.Rentingcontract", b =>
                {
                    b.Property<int>("IdRentingContract")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_RentingContract");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime")
                        .HasColumnName("_Date");

                    b.Property<int>("IdEst")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Est");

                    b.Property<int>("IdRenter")
                        .HasColumnType("int(11)")
                        .HasColumnName("Id_Renter");

                    b.Property<int>("Value")
                        .HasColumnType("int(11)")
                        .HasColumnName("_Value");

                    b.HasKey("IdRentingContract")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdEst" }, "id_Est")
                        .HasDatabaseName("id_Est1");

                    b.HasIndex(new[] { "IdRenter" }, "id_Renter");

                    b.ToTable("rentingcontract", (string)null);
                });

            modelBuilder.Entity("RealEstate.Models.NewIdentityUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<long>("Dni")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("FirstSurName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SecondName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("SecondSurName")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasDiscriminator().HasValue("NewIdentityUser");
                });

            modelBuilder.Entity("Aspnetuserrole", b =>
                {
                    b.HasOne("RealEstate.Models.Aspnetrole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetRoles_RoleId");

                    b.HasOne("RealEstate.Models.Aspnetuser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserRoles_AspNetUsers_UserId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetroleclaim", b =>
                {
                    b.HasOne("RealEstate.Models.Aspnetrole", "Role")
                        .WithMany("Aspnetroleclaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetRoleClaims_AspNetRoles_RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetuserclaim", b =>
                {
                    b.HasOne("RealEstate.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserclaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserClaims_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetuserlogin", b =>
                {
                    b.HasOne("RealEstate.Models.Aspnetuser", "User")
                        .WithMany("Aspnetuserlogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserLogins_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetusertoken", b =>
                {
                    b.HasOne("RealEstate.Models.Aspnetuser", "User")
                        .WithMany("Aspnetusertokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AspNetUserTokens_AspNetUsers_UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RealEstate.Models.Buycontract", b =>
                {
                    b.HasOne("RealEstate.Models.Buyer", "IdBuyerNavigation")
                        .WithMany("Buycontracts")
                        .HasForeignKey("IdBuyer")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("buycontract_ibfk_2");

                    b.HasOne("RealEstate.Models.Estate", "IdEstNavigation")
                        .WithOne("Buycontract")
                        .HasForeignKey("RealEstate.Models.Buycontract", "IdEst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("buycontract_ibfk_1");

                    b.Navigation("IdBuyerNavigation");

                    b.Navigation("IdEstNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Buyer", b =>
                {
                    b.HasOne("RealEstate.Models.Estate", "IdEstateNavigation")
                        .WithOne("Buyer")
                        .HasForeignKey("RealEstate.Models.Buyer", "IdEstate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("buyer_ibfk_1");

                    b.Navigation("IdEstateNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Estate", b =>
                {
                    b.HasOne("RealEstate.Models.Aspnetuser", "IdUserNavigation")
                        .WithMany("Estates")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("Id_User");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Guarantor", b =>
                {
                    b.HasOne("RealEstate.Models.Renter", "IdRenterNavigation")
                        .WithMany("Guarantors")
                        .HasForeignKey("IdRenter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("guarantor_ibfk_1");

                    b.Navigation("IdRenterNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Mortgage", b =>
                {
                    b.HasOne("RealEstate.Models.Estate", "IdEstateNavigation")
                        .WithOne("Mortgage")
                        .HasForeignKey("RealEstate.Models.Mortgage", "IdEstate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("mortgage_ibfk_1");

                    b.HasOne("RealEstate.Models.Aspnetuser", "IdUserNavigation")
                        .WithMany("Mortgages")
                        .HasForeignKey("IdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("iduser");

                    b.Navigation("IdEstateNavigation");

                    b.Navigation("IdUserNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Payment", b =>
                {
                    b.HasOne("RealEstate.Models.Mortgage", "IdMortgageNavigation")
                        .WithMany("Payments")
                        .HasForeignKey("IdMortgage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("payments_ibfk_1");

                    b.Navigation("IdMortgageNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Renter", b =>
                {
                    b.HasOne("RealEstate.Models.Estate", "IdEstateNavigation")
                        .WithMany("Renters")
                        .HasForeignKey("IdEstate")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("renter_ibfk_1");

                    b.Navigation("IdEstateNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Rentingcontract", b =>
                {
                    b.HasOne("RealEstate.Models.Estate", "IdEstNavigation")
                        .WithMany("Rentingcontracts")
                        .HasForeignKey("IdEst")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rentingcontract_ibfk_1");

                    b.HasOne("RealEstate.Models.Renter", "IdRenterNavigation")
                        .WithMany("Rentingcontracts")
                        .HasForeignKey("IdRenter")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("rentingcontract_ibfk_2");

                    b.Navigation("IdEstNavigation");

                    b.Navigation("IdRenterNavigation");
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetrole", b =>
                {
                    b.Navigation("Aspnetroleclaims");
                });

            modelBuilder.Entity("RealEstate.Models.Aspnetuser", b =>
                {
                    b.Navigation("Aspnetuserclaims");

                    b.Navigation("Aspnetuserlogins");

                    b.Navigation("Aspnetusertokens");

                    b.Navigation("Estates");

                    b.Navigation("Mortgages");
                });

            modelBuilder.Entity("RealEstate.Models.Buyer", b =>
                {
                    b.Navigation("Buycontracts");
                });

            modelBuilder.Entity("RealEstate.Models.Estate", b =>
                {
                    b.Navigation("Buycontract");

                    b.Navigation("Buyer");

                    b.Navigation("Mortgage");

                    b.Navigation("Renters");

                    b.Navigation("Rentingcontracts");
                });

            modelBuilder.Entity("RealEstate.Models.Mortgage", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("RealEstate.Models.Renter", b =>
                {
                    b.Navigation("Guarantors");

                    b.Navigation("Rentingcontracts");
                });
#pragma warning restore 612, 618
        }
    }
}
